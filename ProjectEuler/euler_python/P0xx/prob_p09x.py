import math
from itertools import combinations, product, permutations
from typing import List

from utils.help import gcd3


def P90():
    comb_list = []
    ret = 0

    for comb in combinations([i for i in range(10)], 6):
        data_set = set(comb)
        if {6, 9} & data_set:
            data_set |= {6, 9}
        comb_list.append(data_set)

    size = len(comb_list)

    for i in range(size):
        for j in range(i, size):
            check = [True] * 10
            for k in range(1, 9 + 1):
                a, b = (k * k) // 10, (k * k) % 10
                check[k] = (a in comb_list[i] and b in comb_list[j]) or (b in comb_list[i] and a in comb_list[j])
            if all(check):
                ret += 1
    return ret


def P93():
    oper_list = [op for op in product("+-*/", repeat=3)]

    def F(n1, n2, n3, n4):
        ret = set([])

        for o1, o2, o3 in oper_list:
            for numbers in permutations([n1, n2, n3, n4], 4):
                a, b, c, d = numbers

                equations = [
                    f"{a} {o1} {b} {o2} {c} {o3} {d}",
                    f"({a} {o1} {b}) {o2} {c} {o3} {d}",
                    f"{a} {o1} ({b} {o2} {c}) {o3} {d}",
                    f"{a} {o1} {b} {o2} ({c} {o3} {d})",

                    f"({a} {o1} {b}) {o2} ({c} {o3} {d})",

                    f"({a} {o1} {b} {o2} {c}) {o3} {d}",
                    f"{a} {o1} ({b} {o2} {c} {o3} {d})",

                    f"(({a} {o1} {b}) {o2} {c}) {o3} {d}",
                    f"({a} {o1} ({b} {o2} {c})) {o3} {d}",

                    f"{a} {o1} (({b} {o2} {c}) {o3} {d})",
                    f"{a} {o1} ({b} {o2} ({c} {o3} {d}))",
                ]

                for eq in equations:
                    try:
                        val = eval(eq)
                        if val > 0 and val == int(val):
                            # print(f"{eq} = {val}")
                            ret.add(int(val))
                    except:
                        pass

        return ret

    def count(ret):
        i = 0
        while i + 1 in ret:
            i += 1
        return i

    number_list = [num for num in combinations([i for i in range(1, 10 + 1)], 4)]

    best = 0
    ret = None
    for number in number_list:
        ans = F(*number)
        sol = count(ans)

        if best < sol:
            best = sol
            ret = number

            print('best', best)
            print('ret', ret)

    return ret


def P94():
    # MaxN = 1_000_000_000
    import time
    st = time.time()
    tri_l = []  # 둘레의 집합들
    u = 2
    d = 1
    while min(2 * (u + 3 * d) ** 2, 4 * u ** 2) < 10 ** 9:
        tri_l.append(2 * (u + 3 * d) ** 2)  # case1
        tri_l.append(4 * u ** 2)  # case2
        uold = u
        dold = d
        u = 2 * uold + 3 * dold
        d = uold + dold * 2

    summation = 0
    for i in tri_l:
        if i < 10 ** 9:
            summation += i

    print(summation)
    et = time.time()
    print(et - st)

    MaxN = 1_000_000_000

    max_n = int(math.sqrt(MaxN / 3))
    ret = 0

    for m in range(2, max_n + 1):
        for n in range(1, m):
            a = m * m - n * n
            b = 2 * m * n
            c = m * m + n * n

            if c * 2 >= MaxN: break

            if c + c + a + a <= MaxN and abs(c - 2 * a) <= 1:
                ret += c + c + a * 2

            if c + c + b + b <= MaxN and abs(c - 2 * b) <= 1:
                ret += c + c + b * 2

    return ret


def P95():
    N = 1_000_000
    sum_divisors = [0] * (N + 1)
    min_cycle = [0] * (N + 1)
    count_cycle = [0] * (N + 1)

    def find_cycle(start_pos):

        if min_cycle[start_pos] == 0:
            pos_list = []

            k = start_pos
            while 2 <= k <= N and min_cycle[k] == 0:
                pos_list.append(k)
                min_cycle[k] = start_pos
                k = sum_divisors[k]

            if 2 <= k <= N and k in pos_list:
                idx = pos_list.index(k)
                none_cycle_list = pos_list[:idx]
                cycle_list = pos_list[idx:]
            else:
                none_cycle_list = pos_list[::]
                cycle_list = []

            for i in none_cycle_list:
                min_cycle[i] = -1

            if cycle_list:
                min_value = min(cycle_list)
                len_cycle = len(cycle_list)

                for i in cycle_list:
                    min_cycle[i] = min_value
                    count_cycle[i] = len_cycle

        if min_cycle[start_pos] < 0:
            return False, 0, 0

        if min_cycle[start_pos] > 0:
            return True, count_cycle[start_pos], min_cycle[start_pos]

    for i in range(2, N + 1):
        k = 2
        while k * i <= N:
            sum_divisors[k * i] += i
            k += 1

        sum_divisors[i] += 1

    sol_max_length = 0
    sol_min_value = 0

    for i in range(2, N + 1):
        found, cnt, start_pos = find_cycle(i)
        if found and sol_max_length < cnt:
            sol_max_length = cnt
            sol_min_value = start_pos
            print(f"Number : {i} / cycle : {cnt}")

    return sol_min_value


def P96():
    in_data = """Grid 01
003020600
900305001
001806400
008102900
700000008
006708200
002609500
800203009
005010300
Grid 02
200080300
060070084
030500209
000105408
000000000
402706000
301007040
720040060
004010003
Grid 03
000000907
000420180
000705026
100904000
050000040
000507009
920108000
034059000
507000000
Grid 04
030050040
008010500
460000012
070502080
000603000
040109030
250000098
001020600
080060020
Grid 05
020810740
700003100
090002805
009040087
400208003
160030200
302700060
005600008
076051090
Grid 06
100920000
524010000
000000070
050008102
000000000
402700090
060000000
000030945
000071006
Grid 07
043080250
600000000
000001094
900004070
000608000
010200003
820500000
000000005
034090710
Grid 08
480006902
002008001
900370060
840010200
003704100
001060049
020085007
700900600
609200018
Grid 09
000900002
050123400
030000160
908000000
070000090
000000205
091000050
007439020
400007000
Grid 10
001900003
900700160
030005007
050000009
004302600
200000070
600100030
042007006
500006800
Grid 11
000125400
008400000
420800000
030000095
060902010
510000060
000003049
000007200
001298000
Grid 12
062340750
100005600
570000040
000094800
400000006
005830000
030000091
006400007
059083260
Grid 13
300000000
005009000
200504000
020000700
160000058
704310600
000890100
000067080
000005437
Grid 14
630000000
000500008
005674000
000020000
003401020
000000345
000007004
080300902
947100080
Grid 15
000020040
008035000
000070602
031046970
200000000
000501203
049000730
000000010
800004000
Grid 16
361025900
080960010
400000057
008000471
000603000
259000800
740000005
020018060
005470329
Grid 17
050807020
600010090
702540006
070020301
504000908
103080070
900076205
060090003
080103040
Grid 18
080005000
000003457
000070809
060400903
007010500
408007020
901020000
842300000
000100080
Grid 19
003502900
000040000
106000305
900251008
070408030
800763001
308000104
000020000
005104800
Grid 20
000000000
009805100
051907420
290401065
000000000
140508093
026709580
005103600
000000000
Grid 21
020030090
000907000
900208005
004806500
607000208
003102900
800605007
000309000
030020050
Grid 22
005000006
070009020
000500107
804150000
000803000
000092805
907006000
030400010
200000600
Grid 23
040000050
001943600
009000300
600050002
103000506
800020007
005000200
002436700
030000040
Grid 24
004000000
000030002
390700080
400009001
209801307
600200008
010008053
900040000
000000800
Grid 25
360020089
000361000
000000000
803000602
400603007
607000108
000000000
000418000
970030014
Grid 26
500400060
009000800
640020000
000001008
208000501
700500000
000090084
003000600
060003002
Grid 27
007256400
400000005
010030060
000508000
008060200
000107000
030070090
200000004
006312700
Grid 28
000000000
079050180
800000007
007306800
450708096
003502700
700000005
016030420
000000000
Grid 29
030000080
009000500
007509200
700105008
020090030
900402001
004207100
002000800
070000090
Grid 30
200170603
050000100
000006079
000040700
000801000
009050000
310400000
005000060
906037002
Grid 31
000000080
800701040
040020030
374000900
000030000
005000321
010060050
050802006
080000000
Grid 32
000000085
000210009
960080100
500800016
000000000
890006007
009070052
300054000
480000000
Grid 33
608070502
050608070
002000300
500090006
040302050
800050003
005000200
010704090
409060701
Grid 34
050010040
107000602
000905000
208030501
040070020
901080406
000401000
304000709
020060010
Grid 35
053000790
009753400
100000002
090080010
000907000
080030070
500000003
007641200
061000940
Grid 36
006080300
049070250
000405000
600317004
007000800
100826009
000702000
075040190
003090600
Grid 37
005080700
700204005
320000084
060105040
008000500
070803010
450000091
600508007
003010600
Grid 38
000900800
128006400
070800060
800430007
500000009
600079008
090004010
003600284
001007000
Grid 39
000080000
270000054
095000810
009806400
020403060
006905100
017000620
460000038
000090000
Grid 40
000602000
400050001
085010620
038206710
000000000
019407350
026040530
900020007
000809000
Grid 41
000900002
050123400
030000160
908000000
070000090
000000205
091000050
007439020
400007000
Grid 42
380000000
000400785
009020300
060090000
800302009
000040070
001070500
495006000
000000092
Grid 43
000158000
002060800
030000040
027030510
000000000
046080790
050000080
004070100
000325000
Grid 44
010500200
900001000
002008030
500030007
008000500
600080004
040100700
000700006
003004050
Grid 45
080000040
000469000
400000007
005904600
070608030
008502100
900000005
000781000
060000010
Grid 46
904200007
010000000
000706500
000800090
020904060
040002000
001607000
000000030
300005702
Grid 47
000700800
006000031
040002000
024070000
010030080
000060290
000800070
860000500
002006000
Grid 48
001007090
590080001
030000080
000005800
050060020
004100000
080000030
100020079
020700400
Grid 49
000003017
015009008
060000000
100007000
009000200
000500004
000000020
500600340
340200000
Grid 50
300200000
000107000
706030500
070009080
900020004
010800050
009040301
000702000
000008006  
    """

    class sudoku(object):
        row_remain: List[int]
        column_remain: List[int]
        grid_remain: List[List[int]]

        row_possbiles: List[set]
        column_possibles: List[set]
        grid_possibles: List[List[set]]

        numbers: List

        def __init__(self):
            self.row_remain = [9 for _ in range(9)]
            self.column_remain = [9 for _ in range(9)]
            self.grid_remain = [[9, 9, 9] for _ in range(3)]

            self.row_possbiles = [{1, 2, 3, 4, 5, 6, 7, 8, 9} for _ in range(9)]
            self.column_possibles = [{1, 2, 3, 4, 5, 6, 7, 8, 9} for _ in range(9)]
            self.grid_possibles = []
            self.numbers = []
            for i in range(3):
                self.grid_possibles.append([{1, 2, 3, 4, 5, 6, 7, 8, 9} for _ in range(3)])

            self.numbers = [[0, 0, 0, 0, 0, 0, 0, 0, 0] for _ in range(9)]

        def get_possible_numbers(self, y, x):
            return self.row_possbiles[y] & self.column_possibles[x] & self.grid_possibles[y//3][x//3]

        def set_number(self, y, x, num):
            self.row_remain[y] -= 1
            self.column_remain[x] -= 1
            self.grid_remain[y//3][x//3] -= 1

            self.row_possbiles[y] -= {num}
            self.column_possibles[x] -= {num}
            self.grid_possibles[y // 3][x // 3] -= {num}

            self.numbers[y][x] = num

        def unset_number(self, y, x, num):

            self.row_remain[y] += 1
            self.column_remain[x] += 1
            self.grid_remain[y//3][x//3] += 1

            self.row_possbiles[y] |= {num}
            self.column_possibles[x] |= {num}
            self.grid_possibles[y // 3][x // 3] |= {num}

            self.numbers[y][x] = 0

        def check(self):
            for i in range(9):
                if self.row_remain[i] != len(self.row_possbiles[i]): return False
                if self.column_remain[i] != len(self.column_possibles[i]): return False

            for i in range(3):
                for j in range(3):
                    if self.grid_remain[i][j] != len(self.grid_possibles[i][j]):
                        return False
            return True

        def solve(self, start_pos=0):

            while start_pos < 81 and self.numbers[start_pos // 9][start_pos % 9] != 0:
                start_pos += 1

            if start_pos == 81:
                return int(f'{self.numbers[0][0]}{self.numbers[0][1]}{self.numbers[0][2]}')

            y = start_pos // 9
            x = start_pos % 9

            for number in self.get_possible_numbers(y, x):

                self.set_number(y, x, number)
                if self.check():
                    ret = self.solve(start_pos+1)
                    if ret:
                        return ret
                self.unset_number(y, x, number)

            return None

    in_data = in_data.strip().splitlines()
    idx = 0
    ret = 0

    while idx < len(in_data):
        idx += 1

        solver = sudoku()
        for i in range(0, 9):
            for j in range(0, 9):
                n = int(in_data[idx + i][j])
                if n > 0:
                    solver.set_number(i, j, n)

        sol = solver.solve()
        print(f"sol [{idx}]: {sol}")
        ret += sol
        idx += 9

    return ret

def P98():
    words = [
        "A", "ABILITY", "ABLE", "ABOUT", "ABOVE", "ABSENCE", "ABSOLUTELY", "ACADEMIC", "ACCEPT", "ACCESS", "ACCIDENT",
        "ACCOMPANY", "ACCORDING", "ACCOUNT", "ACHIEVE", "ACHIEVEMENT", "ACID", "ACQUIRE", "ACROSS", "ACT", "ACTION",
        "ACTIVE", "ACTIVITY", "ACTUAL", "ACTUALLY", "ADD", "ADDITION", "ADDITIONAL", "ADDRESS", "ADMINISTRATION",
        "ADMIT", "ADOPT", "ADULT", "ADVANCE", "ADVANTAGE", "ADVICE", "ADVISE", "AFFAIR", "AFFECT", "AFFORD", "AFRAID",
        "AFTER", "AFTERNOON", "AFTERWARDS", "AGAIN", "AGAINST", "AGE", "AGENCY", "AGENT", "AGO", "AGREE", "AGREEMENT",
        "AHEAD", "AID", "AIM", "AIR", "AIRCRAFT", "ALL", "ALLOW", "ALMOST", "ALONE", "ALONG", "ALREADY", "ALRIGHT",
        "ALSO", "ALTERNATIVE", "ALTHOUGH", "ALWAYS", "AMONG", "AMONGST", "AMOUNT", "AN", "ANALYSIS", "ANCIENT", "AND",
        "ANIMAL", "ANNOUNCE", "ANNUAL", "ANOTHER", "ANSWER", "ANY", "ANYBODY", "ANYONE", "ANYTHING", "ANYWAY", "APART",
        "APPARENT", "APPARENTLY", "APPEAL", "APPEAR", "APPEARANCE", "APPLICATION", "APPLY", "APPOINT", "APPOINTMENT",
        "APPROACH", "APPROPRIATE", "APPROVE", "AREA", "ARGUE", "ARGUMENT", "ARISE", "ARM", "ARMY", "AROUND", "ARRANGE",
        "ARRANGEMENT", "ARRIVE", "ART", "ARTICLE", "ARTIST", "AS", "ASK", "ASPECT", "ASSEMBLY", "ASSESS", "ASSESSMENT",
        "ASSET", "ASSOCIATE", "ASSOCIATION", "ASSUME", "ASSUMPTION", "AT", "ATMOSPHERE", "ATTACH", "ATTACK", "ATTEMPT",
        "ATTEND", "ATTENTION", "ATTITUDE", "ATTRACT", "ATTRACTIVE", "AUDIENCE", "AUTHOR", "AUTHORITY", "AVAILABLE",
        "AVERAGE", "AVOID", "AWARD", "AWARE", "AWAY", "AYE", "BABY", "BACK", "BACKGROUND", "BAD", "BAG", "BALANCE",
        "BALL", "BAND", "BANK", "BAR", "BASE", "BASIC", "BASIS", "BATTLE", "BE", "BEAR", "BEAT", "BEAUTIFUL", "BECAUSE",
        "BECOME", "BED", "BEDROOM", "BEFORE", "BEGIN", "BEGINNING", "BEHAVIOUR", "BEHIND", "BELIEF", "BELIEVE",
        "BELONG", "BELOW", "BENEATH", "BENEFIT", "BESIDE", "BEST", "BETTER", "BETWEEN", "BEYOND", "BIG", "BILL", "BIND",
        "BIRD", "BIRTH", "BIT", "BLACK", "BLOCK", "BLOOD", "BLOODY", "BLOW", "BLUE", "BOARD", "BOAT", "BODY", "BONE",
        "BOOK", "BORDER", "BOTH", "BOTTLE", "BOTTOM", "BOX", "BOY", "BRAIN", "BRANCH", "BREAK", "BREATH", "BRIDGE",
        "BRIEF", "BRIGHT", "BRING", "BROAD", "BROTHER", "BUDGET", "BUILD", "BUILDING", "BURN", "BUS", "BUSINESS",
        "BUSY", "BUT", "BUY", "BY", "CABINET", "CALL", "CAMPAIGN", "CAN", "CANDIDATE", "CAPABLE", "CAPACITY", "CAPITAL",
        "CAR", "CARD", "CARE", "CAREER", "CAREFUL", "CAREFULLY", "CARRY", "CASE", "CASH", "CAT", "CATCH", "CATEGORY",
        "CAUSE", "CELL", "CENTRAL", "CENTRE", "CENTURY", "CERTAIN", "CERTAINLY", "CHAIN", "CHAIR", "CHAIRMAN",
        "CHALLENGE", "CHANCE", "CHANGE", "CHANNEL", "CHAPTER", "CHARACTER", "CHARACTERISTIC", "CHARGE", "CHEAP",
        "CHECK", "CHEMICAL", "CHIEF", "CHILD", "CHOICE", "CHOOSE", "CHURCH", "CIRCLE", "CIRCUMSTANCE", "CITIZEN",
        "CITY", "CIVIL", "CLAIM", "CLASS", "CLEAN", "CLEAR", "CLEARLY", "CLIENT", "CLIMB", "CLOSE", "CLOSELY",
        "CLOTHES", "CLUB", "COAL", "CODE", "COFFEE", "COLD", "COLLEAGUE", "COLLECT", "COLLECTION", "COLLEGE", "COLOUR",
        "COMBINATION", "COMBINE", "COME", "COMMENT", "COMMERCIAL", "COMMISSION", "COMMIT", "COMMITMENT", "COMMITTEE",
        "COMMON", "COMMUNICATION", "COMMUNITY", "COMPANY", "COMPARE", "COMPARISON", "COMPETITION", "COMPLETE",
        "COMPLETELY", "COMPLEX", "COMPONENT", "COMPUTER", "CONCENTRATE", "CONCENTRATION", "CONCEPT", "CONCERN",
        "CONCERNED", "CONCLUDE", "CONCLUSION", "CONDITION", "CONDUCT", "CONFERENCE", "CONFIDENCE", "CONFIRM",
        "CONFLICT", "CONGRESS", "CONNECT", "CONNECTION", "CONSEQUENCE", "CONSERVATIVE", "CONSIDER", "CONSIDERABLE",
        "CONSIDERATION", "CONSIST", "CONSTANT", "CONSTRUCTION", "CONSUMER", "CONTACT", "CONTAIN", "CONTENT", "CONTEXT",
        "CONTINUE", "CONTRACT", "CONTRAST", "CONTRIBUTE", "CONTRIBUTION", "CONTROL", "CONVENTION", "CONVERSATION",
        "COPY", "CORNER", "CORPORATE", "CORRECT", "COS", "COST", "COULD", "COUNCIL", "COUNT", "COUNTRY", "COUNTY",
        "COUPLE", "COURSE", "COURT", "COVER", "CREATE", "CREATION", "CREDIT", "CRIME", "CRIMINAL", "CRISIS",
        "CRITERION", "CRITICAL", "CRITICISM", "CROSS", "CROWD", "CRY", "CULTURAL", "CULTURE", "CUP", "CURRENT",
        "CURRENTLY", "CURRICULUM", "CUSTOMER", "CUT", "DAMAGE", "DANGER", "DANGEROUS", "DARK", "DATA", "DATE",
        "DAUGHTER", "DAY", "DEAD", "DEAL", "DEATH", "DEBATE", "DEBT", "DECADE", "DECIDE", "DECISION", "DECLARE", "DEEP",
        "DEFENCE", "DEFENDANT", "DEFINE", "DEFINITION", "DEGREE", "DELIVER", "DEMAND", "DEMOCRATIC", "DEMONSTRATE",
        "DENY", "DEPARTMENT", "DEPEND", "DEPUTY", "DERIVE", "DESCRIBE", "DESCRIPTION", "DESIGN", "DESIRE", "DESK",
        "DESPITE", "DESTROY", "DETAIL", "DETAILED", "DETERMINE", "DEVELOP", "DEVELOPMENT", "DEVICE", "DIE",
        "DIFFERENCE", "DIFFERENT", "DIFFICULT", "DIFFICULTY", "DINNER", "DIRECT", "DIRECTION", "DIRECTLY", "DIRECTOR",
        "DISAPPEAR", "DISCIPLINE", "DISCOVER", "DISCUSS", "DISCUSSION", "DISEASE", "DISPLAY", "DISTANCE", "DISTINCTION",
        "DISTRIBUTION", "DISTRICT", "DIVIDE", "DIVISION", "DO", "DOCTOR", "DOCUMENT", "DOG", "DOMESTIC", "DOOR",
        "DOUBLE", "DOUBT", "DOWN", "DRAW", "DRAWING", "DREAM", "DRESS", "DRINK", "DRIVE", "DRIVER", "DROP", "DRUG",
        "DRY", "DUE", "DURING", "DUTY", "EACH", "EAR", "EARLY", "EARN", "EARTH", "EASILY", "EAST", "EASY", "EAT",
        "ECONOMIC", "ECONOMY", "EDGE", "EDITOR", "EDUCATION", "EDUCATIONAL", "EFFECT", "EFFECTIVE", "EFFECTIVELY",
        "EFFORT", "EGG", "EITHER", "ELDERLY", "ELECTION", "ELEMENT", "ELSE", "ELSEWHERE", "EMERGE", "EMPHASIS",
        "EMPLOY", "EMPLOYEE", "EMPLOYER", "EMPLOYMENT", "EMPTY", "ENABLE", "ENCOURAGE", "END", "ENEMY", "ENERGY",
        "ENGINE", "ENGINEERING", "ENJOY", "ENOUGH", "ENSURE", "ENTER", "ENTERPRISE", "ENTIRE", "ENTIRELY", "ENTITLE",
        "ENTRY", "ENVIRONMENT", "ENVIRONMENTAL", "EQUAL", "EQUALLY", "EQUIPMENT", "ERROR", "ESCAPE", "ESPECIALLY",
        "ESSENTIAL", "ESTABLISH", "ESTABLISHMENT", "ESTATE", "ESTIMATE", "EVEN", "EVENING", "EVENT", "EVENTUALLY",
        "EVER", "EVERY", "EVERYBODY", "EVERYONE", "EVERYTHING", "EVIDENCE", "EXACTLY", "EXAMINATION", "EXAMINE",
        "EXAMPLE", "EXCELLENT", "EXCEPT", "EXCHANGE", "EXECUTIVE", "EXERCISE", "EXHIBITION", "EXIST", "EXISTENCE",
        "EXISTING", "EXPECT", "EXPECTATION", "EXPENDITURE", "EXPENSE", "EXPENSIVE", "EXPERIENCE", "EXPERIMENT",
        "EXPERT", "EXPLAIN", "EXPLANATION", "EXPLORE", "EXPRESS", "EXPRESSION", "EXTEND", "EXTENT", "EXTERNAL", "EXTRA",
        "EXTREMELY", "EYE", "FACE", "FACILITY", "FACT", "FACTOR", "FACTORY", "FAIL", "FAILURE", "FAIR", "FAIRLY",
        "FAITH", "FALL", "FAMILIAR", "FAMILY", "FAMOUS", "FAR", "FARM", "FARMER", "FASHION", "FAST", "FATHER", "FAVOUR",
        "FEAR", "FEATURE", "FEE", "FEEL", "FEELING", "FEMALE", "FEW", "FIELD", "FIGHT", "FIGURE", "FILE", "FILL",
        "FILM", "FINAL", "FINALLY", "FINANCE", "FINANCIAL", "FIND", "FINDING", "FINE", "FINGER", "FINISH", "FIRE",
        "FIRM", "FIRST", "FISH", "FIT", "FIX", "FLAT", "FLIGHT", "FLOOR", "FLOW", "FLOWER", "FLY", "FOCUS", "FOLLOW",
        "FOLLOWING", "FOOD", "FOOT", "FOOTBALL", "FOR", "FORCE", "FOREIGN", "FOREST", "FORGET", "FORM", "FORMAL",
        "FORMER", "FORWARD", "FOUNDATION", "FREE", "FREEDOM", "FREQUENTLY", "FRESH", "FRIEND", "FROM", "FRONT", "FRUIT",
        "FUEL", "FULL", "FULLY", "FUNCTION", "FUND", "FUNNY", "FURTHER", "FUTURE", "GAIN", "GAME", "GARDEN", "GAS",
        "GATE", "GATHER", "GENERAL", "GENERALLY", "GENERATE", "GENERATION", "GENTLEMAN", "GET", "GIRL", "GIVE", "GLASS",
        "GO", "GOAL", "GOD", "GOLD", "GOOD", "GOVERNMENT", "GRANT", "GREAT", "GREEN", "GREY", "GROUND", "GROUP", "GROW",
        "GROWING", "GROWTH", "GUEST", "GUIDE", "GUN", "HAIR", "HALF", "HALL", "HAND", "HANDLE", "HANG", "HAPPEN",
        "HAPPY", "HARD", "HARDLY", "HATE", "HAVE", "HE", "HEAD", "HEALTH", "HEAR", "HEART", "HEAT", "HEAVY", "HELL",
        "HELP", "HENCE", "HER", "HERE", "HERSELF", "HIDE", "HIGH", "HIGHLY", "HILL", "HIM", "HIMSELF", "HIS",
        "HISTORICAL", "HISTORY", "HIT", "HOLD", "HOLE", "HOLIDAY", "HOME", "HOPE", "HORSE", "HOSPITAL", "HOT", "HOTEL",
        "HOUR", "HOUSE", "HOUSEHOLD", "HOUSING", "HOW", "HOWEVER", "HUGE", "HUMAN", "HURT", "HUSBAND", "I", "IDEA",
        "IDENTIFY", "IF", "IGNORE", "ILLUSTRATE", "IMAGE", "IMAGINE", "IMMEDIATE", "IMMEDIATELY", "IMPACT",
        "IMPLICATION", "IMPLY", "IMPORTANCE", "IMPORTANT", "IMPOSE", "IMPOSSIBLE", "IMPRESSION", "IMPROVE",
        "IMPROVEMENT", "IN", "INCIDENT", "INCLUDE", "INCLUDING", "INCOME", "INCREASE", "INCREASED", "INCREASINGLY",
        "INDEED", "INDEPENDENT", "INDEX", "INDICATE", "INDIVIDUAL", "INDUSTRIAL", "INDUSTRY", "INFLUENCE", "INFORM",
        "INFORMATION", "INITIAL", "INITIATIVE", "INJURY", "INSIDE", "INSIST", "INSTANCE", "INSTEAD", "INSTITUTE",
        "INSTITUTION", "INSTRUCTION", "INSTRUMENT", "INSURANCE", "INTEND", "INTENTION", "INTEREST", "INTERESTED",
        "INTERESTING", "INTERNAL", "INTERNATIONAL", "INTERPRETATION", "INTERVIEW", "INTO", "INTRODUCE", "INTRODUCTION",
        "INVESTIGATE", "INVESTIGATION", "INVESTMENT", "INVITE", "INVOLVE", "IRON", "IS", "ISLAND", "ISSUE", "IT",
        "ITEM", "ITS", "ITSELF", "JOB", "JOIN", "JOINT", "JOURNEY", "JUDGE", "JUMP", "JUST", "JUSTICE", "KEEP", "KEY",
        "KID", "KILL", "KIND", "KING", "KITCHEN", "KNEE", "KNOW", "KNOWLEDGE", "LABOUR", "LACK", "LADY", "LAND",
        "LANGUAGE", "LARGE", "LARGELY", "LAST", "LATE", "LATER", "LATTER", "LAUGH", "LAUNCH", "LAW", "LAWYER", "LAY",
        "LEAD", "LEADER", "LEADERSHIP", "LEADING", "LEAF", "LEAGUE", "LEAN", "LEARN", "LEAST", "LEAVE", "LEFT", "LEG",
        "LEGAL", "LEGISLATION", "LENGTH", "LESS", "LET", "LETTER", "LEVEL", "LIABILITY", "LIBERAL", "LIBRARY", "LIE",
        "LIFE", "LIFT", "LIGHT", "LIKE", "LIKELY", "LIMIT", "LIMITED", "LINE", "LINK", "LIP", "LIST", "LISTEN",
        "LITERATURE", "LITTLE", "LIVE", "LIVING", "LOAN", "LOCAL", "LOCATION", "LONG", "LOOK", "LORD", "LOSE", "LOSS",
        "LOT", "LOVE", "LOVELY", "LOW", "LUNCH", "MACHINE", "MAGAZINE", "MAIN", "MAINLY", "MAINTAIN", "MAJOR",
        "MAJORITY", "MAKE", "MALE", "MAN", "MANAGE", "MANAGEMENT", "MANAGER", "MANNER", "MANY", "MAP", "MARK", "MARKET",
        "MARRIAGE", "MARRIED", "MARRY", "MASS", "MASTER", "MATCH", "MATERIAL", "MATTER", "MAY", "MAYBE", "ME", "MEAL",
        "MEAN", "MEANING", "MEANS", "MEANWHILE", "MEASURE", "MECHANISM", "MEDIA", "MEDICAL", "MEET", "MEETING",
        "MEMBER", "MEMBERSHIP", "MEMORY", "MENTAL", "MENTION", "MERELY", "MESSAGE", "METAL", "METHOD", "MIDDLE",
        "MIGHT", "MILE", "MILITARY", "MILK", "MIND", "MINE", "MINISTER", "MINISTRY", "MINUTE", "MISS", "MISTAKE",
        "MODEL", "MODERN", "MODULE", "MOMENT", "MONEY", "MONTH", "MORE", "MORNING", "MOST", "MOTHER", "MOTION", "MOTOR",
        "MOUNTAIN", "MOUTH", "MOVE", "MOVEMENT", "MUCH", "MURDER", "MUSEUM", "MUSIC", "MUST", "MY", "MYSELF", "NAME",
        "NARROW", "NATION", "NATIONAL", "NATURAL", "NATURE", "NEAR", "NEARLY", "NECESSARILY", "NECESSARY", "NECK",
        "NEED", "NEGOTIATION", "NEIGHBOUR", "NEITHER", "NETWORK", "NEVER", "NEVERTHELESS", "NEW", "NEWS", "NEWSPAPER",
        "NEXT", "NICE", "NIGHT", "NO", "NOBODY", "NOD", "NOISE", "NONE", "NOR", "NORMAL", "NORMALLY", "NORTH",
        "NORTHERN", "NOSE", "NOT", "NOTE", "NOTHING", "NOTICE", "NOTION", "NOW", "NUCLEAR", "NUMBER", "NURSE", "OBJECT",
        "OBJECTIVE", "OBSERVATION", "OBSERVE", "OBTAIN", "OBVIOUS", "OBVIOUSLY", "OCCASION", "OCCUR", "ODD", "OF",
        "OFF", "OFFENCE", "OFFER", "OFFICE", "OFFICER", "OFFICIAL", "OFTEN", "OIL", "OKAY", "OLD", "ON", "ONCE", "ONE",
        "ONLY", "ONTO", "OPEN", "OPERATE", "OPERATION", "OPINION", "OPPORTUNITY", "OPPOSITION", "OPTION", "OR", "ORDER",
        "ORDINARY", "ORGANISATION", "ORGANISE", "ORGANIZATION", "ORIGIN", "ORIGINAL", "OTHER", "OTHERWISE", "OUGHT",
        "OUR", "OURSELVES", "OUT", "OUTCOME", "OUTPUT", "OUTSIDE", "OVER", "OVERALL", "OWN", "OWNER", "PACKAGE", "PAGE",
        "PAIN", "PAINT", "PAINTING", "PAIR", "PANEL", "PAPER", "PARENT", "PARK", "PARLIAMENT", "PART", "PARTICULAR",
        "PARTICULARLY", "PARTLY", "PARTNER", "PARTY", "PASS", "PASSAGE", "PAST", "PATH", "PATIENT", "PATTERN", "PAY",
        "PAYMENT", "PEACE", "PENSION", "PEOPLE", "PER", "PERCENT", "PERFECT", "PERFORM", "PERFORMANCE", "PERHAPS",
        "PERIOD", "PERMANENT", "PERSON", "PERSONAL", "PERSUADE", "PHASE", "PHONE", "PHOTOGRAPH", "PHYSICAL", "PICK",
        "PICTURE", "PIECE", "PLACE", "PLAN", "PLANNING", "PLANT", "PLASTIC", "PLATE", "PLAY", "PLAYER", "PLEASE",
        "PLEASURE", "PLENTY", "PLUS", "POCKET", "POINT", "POLICE", "POLICY", "POLITICAL", "POLITICS", "POOL", "POOR",
        "POPULAR", "POPULATION", "POSITION", "POSITIVE", "POSSIBILITY", "POSSIBLE", "POSSIBLY", "POST", "POTENTIAL",
        "POUND", "POWER", "POWERFUL", "PRACTICAL", "PRACTICE", "PREFER", "PREPARE", "PRESENCE", "PRESENT", "PRESIDENT",
        "PRESS", "PRESSURE", "PRETTY", "PREVENT", "PREVIOUS", "PREVIOUSLY", "PRICE", "PRIMARY", "PRIME", "PRINCIPLE",
        "PRIORITY", "PRISON", "PRISONER", "PRIVATE", "PROBABLY", "PROBLEM", "PROCEDURE", "PROCESS", "PRODUCE",
        "PRODUCT", "PRODUCTION", "PROFESSIONAL", "PROFIT", "PROGRAM", "PROGRAMME", "PROGRESS", "PROJECT", "PROMISE",
        "PROMOTE", "PROPER", "PROPERLY", "PROPERTY", "PROPORTION", "PROPOSE", "PROPOSAL", "PROSPECT", "PROTECT",
        "PROTECTION", "PROVE", "PROVIDE", "PROVIDED", "PROVISION", "PUB", "PUBLIC", "PUBLICATION", "PUBLISH", "PULL",
        "PUPIL", "PURPOSE", "PUSH", "PUT", "QUALITY", "QUARTER", "QUESTION", "QUICK", "QUICKLY", "QUIET", "QUITE",
        "RACE", "RADIO", "RAILWAY", "RAIN", "RAISE", "RANGE", "RAPIDLY", "RARE", "RATE", "RATHER", "REACH", "REACTION",
        "READ", "READER", "READING", "READY", "REAL", "REALISE", "REALITY", "REALIZE", "REALLY", "REASON", "REASONABLE",
        "RECALL", "RECEIVE", "RECENT", "RECENTLY", "RECOGNISE", "RECOGNITION", "RECOGNIZE", "RECOMMEND", "RECORD",
        "RECOVER", "RED", "REDUCE", "REDUCTION", "REFER", "REFERENCE", "REFLECT", "REFORM", "REFUSE", "REGARD",
        "REGION", "REGIONAL", "REGULAR", "REGULATION", "REJECT", "RELATE", "RELATION", "RELATIONSHIP", "RELATIVE",
        "RELATIVELY", "RELEASE", "RELEVANT", "RELIEF", "RELIGION", "RELIGIOUS", "RELY", "REMAIN", "REMEMBER", "REMIND",
        "REMOVE", "REPEAT", "REPLACE", "REPLY", "REPORT", "REPRESENT", "REPRESENTATION", "REPRESENTATIVE", "REQUEST",
        "REQUIRE", "REQUIREMENT", "RESEARCH", "RESOURCE", "RESPECT", "RESPOND", "RESPONSE", "RESPONSIBILITY",
        "RESPONSIBLE", "REST", "RESTAURANT", "RESULT", "RETAIN", "RETURN", "REVEAL", "REVENUE", "REVIEW", "REVOLUTION",
        "RICH", "RIDE", "RIGHT", "RING", "RISE", "RISK", "RIVER", "ROAD", "ROCK", "ROLE", "ROLL", "ROOF", "ROOM",
        "ROUND", "ROUTE", "ROW", "ROYAL", "RULE", "RUN", "RURAL", "SAFE", "SAFETY", "SALE", "SAME", "SAMPLE", "SATISFY",
        "SAVE", "SAY", "SCALE", "SCENE", "SCHEME", "SCHOOL", "SCIENCE", "SCIENTIFIC", "SCIENTIST", "SCORE", "SCREEN",
        "SEA", "SEARCH", "SEASON", "SEAT", "SECOND", "SECONDARY", "SECRETARY", "SECTION", "SECTOR", "SECURE",
        "SECURITY", "SEE", "SEEK", "SEEM", "SELECT", "SELECTION", "SELL", "SEND", "SENIOR", "SENSE", "SENTENCE",
        "SEPARATE", "SEQUENCE", "SERIES", "SERIOUS", "SERIOUSLY", "SERVANT", "SERVE", "SERVICE", "SESSION", "SET",
        "SETTLE", "SETTLEMENT", "SEVERAL", "SEVERE", "SEX", "SEXUAL", "SHAKE", "SHALL", "SHAPE", "SHARE", "SHE",
        "SHEET", "SHIP", "SHOE", "SHOOT", "SHOP", "SHORT", "SHOT", "SHOULD", "SHOULDER", "SHOUT", "SHOW", "SHUT",
        "SIDE", "SIGHT", "SIGN", "SIGNAL", "SIGNIFICANCE", "SIGNIFICANT", "SILENCE", "SIMILAR", "SIMPLE", "SIMPLY",
        "SINCE", "SING", "SINGLE", "SIR", "SISTER", "SIT", "SITE", "SITUATION", "SIZE", "SKILL", "SKIN", "SKY", "SLEEP",
        "SLIGHTLY", "SLIP", "SLOW", "SLOWLY", "SMALL", "SMILE", "SO", "SOCIAL", "SOCIETY", "SOFT", "SOFTWARE", "SOIL",
        "SOLDIER", "SOLICITOR", "SOLUTION", "SOME", "SOMEBODY", "SOMEONE", "SOMETHING", "SOMETIMES", "SOMEWHAT",
        "SOMEWHERE", "SON", "SONG", "SOON", "SORRY", "SORT", "SOUND", "SOURCE", "SOUTH", "SOUTHERN", "SPACE", "SPEAK",
        "SPEAKER", "SPECIAL", "SPECIES", "SPECIFIC", "SPEECH", "SPEED", "SPEND", "SPIRIT", "SPORT", "SPOT", "SPREAD",
        "SPRING", "STAFF", "STAGE", "STAND", "STANDARD", "STAR", "START", "STATE", "STATEMENT", "STATION", "STATUS",
        "STAY", "STEAL", "STEP", "STICK", "STILL", "STOCK", "STONE", "STOP", "STORE", "STORY", "STRAIGHT", "STRANGE",
        "STRATEGY", "STREET", "STRENGTH", "STRIKE", "STRONG", "STRONGLY", "STRUCTURE", "STUDENT", "STUDIO", "STUDY",
        "STUFF", "STYLE", "SUBJECT", "SUBSTANTIAL", "SUCCEED", "SUCCESS", "SUCCESSFUL", "SUCH", "SUDDENLY", "SUFFER",
        "SUFFICIENT", "SUGGEST", "SUGGESTION", "SUITABLE", "SUM", "SUMMER", "SUN", "SUPPLY", "SUPPORT", "SUPPOSE",
        "SURE", "SURELY", "SURFACE", "SURPRISE", "SURROUND", "SURVEY", "SURVIVE", "SWITCH", "SYSTEM", "TABLE", "TAKE",
        "TALK", "TALL", "TAPE", "TARGET", "TASK", "TAX", "TEA", "TEACH", "TEACHER", "TEACHING", "TEAM", "TEAR",
        "TECHNICAL", "TECHNIQUE", "TECHNOLOGY", "TELEPHONE", "TELEVISION", "TELL", "TEMPERATURE", "TEND", "TERM",
        "TERMS", "TERRIBLE", "TEST", "TEXT", "THAN", "THANK", "THANKS", "THAT", "THE", "THEATRE", "THEIR", "THEM",
        "THEME", "THEMSELVES", "THEN", "THEORY", "THERE", "THEREFORE", "THESE", "THEY", "THIN", "THING", "THINK",
        "THIS", "THOSE", "THOUGH", "THOUGHT", "THREAT", "THREATEN", "THROUGH", "THROUGHOUT", "THROW", "THUS", "TICKET",
        "TIME", "TINY", "TITLE", "TO", "TODAY", "TOGETHER", "TOMORROW", "TONE", "TONIGHT", "TOO", "TOOL", "TOOTH",
        "TOP", "TOTAL", "TOTALLY", "TOUCH", "TOUR", "TOWARDS", "TOWN", "TRACK", "TRADE", "TRADITION", "TRADITIONAL",
        "TRAFFIC", "TRAIN", "TRAINING", "TRANSFER", "TRANSPORT", "TRAVEL", "TREAT", "TREATMENT", "TREATY", "TREE",
        "TREND", "TRIAL", "TRIP", "TROOP", "TROUBLE", "TRUE", "TRUST", "TRUTH", "TRY", "TURN", "TWICE", "TYPE",
        "TYPICAL", "UNABLE", "UNDER", "UNDERSTAND", "UNDERSTANDING", "UNDERTAKE", "UNEMPLOYMENT", "UNFORTUNATELY",
        "UNION", "UNIT", "UNITED", "UNIVERSITY", "UNLESS", "UNLIKELY", "UNTIL", "UP", "UPON", "UPPER", "URBAN", "US",
        "USE", "USED", "USEFUL", "USER", "USUAL", "USUALLY", "VALUE", "VARIATION", "VARIETY", "VARIOUS", "VARY", "VAST",
        "VEHICLE", "VERSION", "VERY", "VIA", "VICTIM", "VICTORY", "VIDEO", "VIEW", "VILLAGE", "VIOLENCE", "VISION",
        "VISIT", "VISITOR", "VITAL", "VOICE", "VOLUME", "VOTE", "WAGE", "WAIT", "WALK", "WALL", "WANT", "WAR", "WARM",
        "WARN", "WASH", "WATCH", "WATER", "WAVE", "WAY", "WE", "WEAK", "WEAPON", "WEAR", "WEATHER", "WEEK", "WEEKEND",
        "WEIGHT", "WELCOME", "WELFARE", "WELL", "WEST", "WESTERN", "WHAT", "WHATEVER", "WHEN", "WHERE", "WHEREAS",
        "WHETHER", "WHICH", "WHILE", "WHILST", "WHITE", "WHO", "WHOLE", "WHOM", "WHOSE", "WHY", "WIDE", "WIDELY",
        "WIFE", "WILD", "WILL", "WIN", "WIND", "WINDOW", "WINE", "WING", "WINNER", "WINTER", "WISH", "WITH", "WITHDRAW",
        "WITHIN", "WITHOUT", "WOMAN", "WONDER", "WONDERFUL", "WOOD", "WORD", "WORK", "WORKER", "WORKING", "WORKS",
        "WORLD", "WORRY", "WORTH", "WOULD", "WRITE", "WRITER", "WRITING", "WRONG", "YARD", "YEAH", "YEAR", "YES",
        "YESTERDAY", "YET", "YOU", "YOUNG", "YOUR", "YOURSELF", "YOUTH"
    ]

    for w in words:
        print(w, len(set(w)), set(w))

def P99():
    data = """
519432,525806
632382,518061
78864,613712
466580,530130
780495,510032
525895,525320
15991,714883
960290,502358
760018,511029
166800,575487
210884,564478
555151,523163
681146,515199
563395,522587
738250,512126
923525,503780
595148,520429
177108,572629
750923,511482
440902,532446
881418,505504
422489,534197
979858,501616
685893,514935
747477,511661
167214,575367
234140,559696
940238,503122
728969,512609
232083,560102
900971,504694
688801,514772
189664,569402
891022,505104
445689,531996
119570,591871
821453,508118
371084,539600
911745,504251
623655,518600
144361,582486
352442,541775
420726,534367
295298,549387
6530,787777
468397,529976
672336,515696
431861,533289
84228,610150
805376,508857
444409,532117
33833,663511
381850,538396
402931,536157
92901,604930
304825,548004
731917,512452
753734,511344
51894,637373
151578,580103
295075,549421
303590,548183
333594,544123
683952,515042
60090,628880
951420,502692
28335,674991
714940,513349
343858,542826
549279,523586
804571,508887
260653,554881
291399,549966
402342,536213
408889,535550
40328,652524
375856,539061
768907,510590
165993,575715
976327,501755
898500,504795
360404,540830
478714,529095
694144,514472
488726,528258
841380,507226
328012,544839
22389,690868
604053,519852
329514,544641
772965,510390
492798,527927
30125,670983
895603,504906
450785,531539
840237,507276
380711,538522
63577,625673
76801,615157
502694,527123
597706,520257
310484,547206
944468,502959
121283,591152
451131,531507
566499,522367
425373,533918
40240,652665
39130,654392
714926,513355
469219,529903
806929,508783
287970,550487
92189,605332
103841,599094
671839,515725
452048,531421
987837,501323
935192,503321
88585,607450
613883,519216
144551,582413
647359,517155
213902,563816
184120,570789
258126,555322
502546,527130
407655,535678
401528,536306
477490,529193
841085,507237
732831,512408
833000,507595
904694,504542
581435,521348
455545,531110
873558,505829
94916,603796
720176,513068
545034,523891
246348,557409
556452,523079
832015,507634
173663,573564
502634,527125
250732,556611
569786,522139
216919,563178
521815,525623
92304,605270
164446,576167
753413,511364
11410,740712
448845,531712
925072,503725
564888,522477
7062,780812
641155,517535
738878,512100
636204,517828
372540,539436
443162,532237
571192,522042
655350,516680
299741,548735
581914,521307
965471,502156
513441,526277
808682,508700
237589,559034
543300,524025
804712,508889
247511,557192
543486,524008
504383,526992
326529,545039
792493,509458
86033,609017
126554,589005
579379,521481
948026,502823
404777,535969
265767,554022
266876,553840
46631,643714
492397,527958
856106,506581
795757,509305
748946,511584
294694,549480
409781,535463
775887,510253
543747,523991
210592,564536
517119,525990
520253,525751
247926,557124
592141,520626
346580,542492
544969,523902
506501,526817
244520,557738
144745,582349
69274,620858
292620,549784
926027,503687
736320,512225
515528,526113
407549,535688
848089,506927
24141,685711
9224,757964
980684,501586
175259,573121
489160,528216
878970,505604
969546,502002
525207,525365
690461,514675
156510,578551
659778,516426
468739,529945
765252,510770
76703,615230
165151,575959
29779,671736
928865,503569
577538,521605
927555,503618
185377,570477
974756,501809
800130,509093
217016,563153
365709,540216
774508,510320
588716,520851
631673,518104
954076,502590
777828,510161
990659,501222
597799,520254
786905,509727
512547,526348
756449,511212
869787,505988
653747,516779
84623,609900
839698,507295
30159,670909
797275,509234
678136,515373
897144,504851
989554,501263
413292,535106
55297,633667
788650,509637
486748,528417
150724,580377
56434,632490
77207,614869
588631,520859
611619,519367
100006,601055
528924,525093
190225,569257
851155,506789
682593,515114
613043,519275
514673,526183
877634,505655
878905,505602
1926,914951
613245,519259
152481,579816
841774,507203
71060,619442
865335,506175
90244,606469
302156,548388
399059,536557
478465,529113
558601,522925
69132,620966
267663,553700
988276,501310
378354,538787
529909,525014
161733,576968
758541,511109
823425,508024
149821,580667
269258,553438
481152,528891
120871,591322
972322,501901
981350,501567
676129,515483
950860,502717
119000,592114
392252,537272
191618,568919
946699,502874
289555,550247
799322,509139
703886,513942
194812,568143
261823,554685
203052,566221
217330,563093
734748,512313
391759,537328
807052,508777
564467,522510
59186,629748
113447,594545
518063,525916
905944,504492
613922,519213
439093,532607
445946,531981
230530,560399
297887,549007
459029,530797
403692,536075
855118,506616
963127,502245
841711,507208
407411,535699
924729,503735
914823,504132
333725,544101
176345,572832
912507,504225
411273,535308
259774,555036
632853,518038
119723,591801
163902,576321
22691,689944
402427,536212
175769,572988
837260,507402
603432,519893
313679,546767
538165,524394
549026,523608
61083,627945
898345,504798
992556,501153
369999,539727
32847,665404
891292,505088
152715,579732
824104,507997
234057,559711
730507,512532
960529,502340
388395,537687
958170,502437
57105,631806
186025,570311
993043,501133
576770,521664
215319,563513
927342,503628
521353,525666
39563,653705
752516,511408
110755,595770
309749,547305
374379,539224
919184,503952
990652,501226
647780,517135
187177,570017
168938,574877
649558,517023
278126,552016
162039,576868
658512,516499
498115,527486
896583,504868
561170,522740
747772,511647
775093,510294
652081,516882
724905,512824
499707,527365
47388,642755
646668,517204
571700,522007
180430,571747
710015,513617
435522,532941
98137,602041
759176,511070
486124,528467
526942,525236
878921,505604
408313,535602
926980,503640
882353,505459
566887,522345
3326,853312
911981,504248
416309,534800
392991,537199
622829,518651
148647,581055
496483,527624
666314,516044
48562,641293
672618,515684
443676,532187
274065,552661
265386,554079
347668,542358
31816,667448
181575,571446
961289,502320
365689,540214
987950,501317
932299,503440
27388,677243
746701,511701
492258,527969
147823,581323
57918,630985
838849,507333
678038,515375
27852,676130
850241,506828
818403,508253
131717,587014
850216,506834
904848,504529
189758,569380
392845,537217
470876,529761
925353,503711
285431,550877
454098,531234
823910,508003
318493,546112
766067,510730
261277,554775
421530,534289
694130,514478
120439,591498
213308,563949
854063,506662
365255,540263
165437,575872
662240,516281
289970,550181
847977,506933
546083,523816
413252,535113
975829,501767
361540,540701
235522,559435
224643,561577
736350,512229
328303,544808
35022,661330
307838,547578
474366,529458
873755,505819
73978,617220
827387,507845
670830,515791
326511,545034
309909,547285
400970,536363
884827,505352
718307,513175
28462,674699
599384,520150
253565,556111
284009,551093
343403,542876
446557,531921
992372,501160
961601,502308
696629,514342
919537,503945
894709,504944
892201,505051
358160,541097
448503,531745
832156,507636
920045,503924
926137,503675
416754,534757
254422,555966
92498,605151
826833,507873
660716,516371
689335,514746
160045,577467
814642,508425
969939,501993
242856,558047
76302,615517
472083,529653
587101,520964
99066,601543
498005,527503
709800,513624
708000,513716
20171,698134
285020,550936
266564,553891
981563,501557
846502,506991
334,1190800
209268,564829
9844,752610
996519,501007
410059,535426
432931,533188
848012,506929
966803,502110
983434,501486
160700,577267
504374,526989
832061,507640
392825,537214
443842,532165
440352,532492
745125,511776
13718,726392
661753,516312
70500,619875
436952,532814
424724,533973
21954,692224
262490,554567
716622,513264
907584,504425
60086,628882
837123,507412
971345,501940
947162,502855
139920,584021
68330,621624
666452,516038
731446,512481
953350,502619
183157,571042
845400,507045
651548,516910
20399,697344
861779,506331
629771,518229
801706,509026
189207,569512
737501,512168
719272,513115
479285,529045
136046,585401
896746,504860
891735,505067
684771,514999
865309,506184
379066,538702
503117,527090
621780,518717
209518,564775
677135,515423
987500,501340
197049,567613
329315,544673
236756,559196
357092,541226
520440,525733
213471,563911
956852,502490
702223,514032
404943,535955
178880,572152
689477,514734
691351,514630
866669,506128
370561,539656
739805,512051
71060,619441
624861,518534
261660,554714
366137,540160
166054,575698
601878,519990
153445,579501
279899,551729
379166,538691
423209,534125
675310,515526
145641,582050
691353,514627
917468,504026
284778,550976
81040,612235
161699,576978
616394,519057
767490,510661
156896,578431
427408,533714
254849,555884
737217,512182
897133,504851
203815,566051
270822,553189
135854,585475
778805,510111
784373,509847
305426,547921
733418,512375
732087,512448
540668,524215
702898,513996
628057,518328
640280,517587
422405,534204
10604,746569
746038,511733
839808,507293
457417,530938
479030,529064
341758,543090
620223,518824
251661,556451
561790,522696
497733,527521
724201,512863
489217,528217
415623,534867
624610,518548
847541,506953
432295,533249
400391,536421
961158,502319
139173,584284
421225,534315
579083,521501
74274,617000
701142,514087
374465,539219
217814,562985
358972,540995
88629,607424
288597,550389
285819,550812
538400,524385
809930,508645
738326,512126
955461,502535
163829,576343
826475,507891
376488,538987
102234,599905
114650,594002
52815,636341
434037,533082
804744,508880
98385,601905
856620,506559
220057,562517
844734,507078
150677,580387
558697,522917
621751,518719
207067,565321
135297,585677
932968,503404
604456,519822
579728,521462
244138,557813
706487,513800
711627,513523
853833,506674
497220,527562
59428,629511
564845,522486
623621,518603
242689,558077
125091,589591
363819,540432
686453,514901
656813,516594
489901,528155
386380,537905
542819,524052
243987,557841
693412,514514
488484,528271
896331,504881
336730,543721
728298,512647
604215,519840
153729,579413
595687,520398
540360,524240
245779,557511
924873,503730
509628,526577
528523,525122
3509,847707
522756,525555
895447,504922
44840,646067
45860,644715
463487,530404
398164,536654
894483,504959
619415,518874
966306,502129
990922,501212
835756,507474
548881,523618
453578,531282
474993,529410
80085,612879
737091,512193
50789,638638
979768,501620
792018,509483
665001,516122
86552,608694
462772,530469
589233,520821
891694,505072
592605,520594
209645,564741
42531,649269
554376,523226
803814,508929
334157,544042
175836,572970
868379,506051
658166,516520
278203,551995
966198,502126
627162,518387
296774,549165
311803,547027
843797,507118
702304,514032
563875,522553
33103,664910
191932,568841
543514,524006
506835,526794
868368,506052
847025,506971
678623,515342
876139,505726
571997,521984
598632,520198
213590,563892
625404,518497
726508,512738
689426,514738
332495,544264
411366,535302
242546,558110
315209,546555
797544,509219
93889,604371
858879,506454
124906,589666
449072,531693
235960,559345
642403,517454
720567,513047
705534,513858
603692,519870
488137,528302
157370,578285
63515,625730
666326,516041
619226,518883
443613,532186
597717,520257
96225,603069
86940,608450
40725,651929
460976,530625
268875,553508
270671,553214
363254,540500
384248,538137
762889,510892
377941,538833
278878,551890
176615,572755
860008,506412
944392,502967
608395,519571
225283,561450
45095,645728
333798,544090
625733,518476
995584,501037
506135,526853
238050,558952
557943,522972
530978,524938
634244,517949
177168,572616
85200,609541
953043,502630
523661,525484
999295,500902
840803,507246
961490,502312
471747,529685
380705,538523
911180,504275
334149,544046
478992,529065
325789,545133
335884,543826
426976,533760
749007,511582
667067,516000
607586,519623
674054,515599
188534,569675
565185,522464
172090,573988
87592,608052
907432,504424
8912,760841
928318,503590
757917,511138
718693,513153
315141,546566
728326,512645
353492,541647
638429,517695
628892,518280
877286,505672
620895,518778
385878,537959
423311,534113
633501,517997
884833,505360
883402,505416
999665,500894
708395,513697
548142,523667
756491,511205
987352,501340
766520,510705
591775,520647
833758,507563
843890,507108
925551,503698
74816,616598
646942,517187
354923,541481
256291,555638
634470,517942
930904,503494
134221,586071
282663,551304
986070,501394
123636,590176
123678,590164
481717,528841
423076,534137
866246,506145
93313,604697
783632,509880
317066,546304
502977,527103
141272,583545
71708,618938
617748,518975
581190,521362
193824,568382
682368,515131
352956,541712
351375,541905
505362,526909
905165,504518
128645,588188
267143,553787
158409,577965
482776,528754
628896,518282
485233,528547
563606,522574
111001,595655
115920,593445
365510,540237
959724,502374
938763,503184
930044,503520
970959,501956
913658,504176
68117,621790
989729,501253
567697,522288
820427,508163
54236,634794
291557,549938
124961,589646
403177,536130
405421,535899
410233,535417
815111,508403
213176,563974
83099,610879
998588,500934
513640,526263
129817,587733
1820,921851
287584,550539
299160,548820
860621,506386
529258,525059
586297,521017
953406,502616
441234,532410
986217,501386
781938,509957
461247,530595
735424,512277
146623,581722
839838,507288
510667,526494
935085,503327
737523,512167
303455,548204
992779,501145
60240,628739
939095,503174
794368,509370
501825,527189
459028,530798
884641,505363
512287,526364
835165,507499
307723,547590
160587,577304
735043,512300
493289,527887
110717,595785
306480,547772
318593,546089
179810,571911
200531,566799
314999,546580
197020,567622
301465,548487
237808,559000
131944,586923
882527,505449
468117,530003
711319,513541
156240,578628
965452,502162
992756,501148
437959,532715
739938,512046
614249,519196
391496,537356
62746,626418
688215,514806
75501,616091
883573,505412
558824,522910
759371,511061
173913,573489
891351,505089
727464,512693
164833,576051
812317,508529
540320,524243
698061,514257
69149,620952
471673,529694
159092,577753
428134,533653
89997,606608
711061,513557
779403,510081
203327,566155
798176,509187
667688,515963
636120,517833
137410,584913
217615,563034
556887,523038
667229,515991
672276,515708
325361,545187
172115,573985
13846,725685    
    """

    sol = 0
    ret = 0
    i = 0
    for line in data.strip().splitlines():
        i += 1
        a, b = map(int, line.split(','))
        ans = math.log(a) * b
        if sol < ans :
            sol = ans
            ret = i

    return ret