import itertools
import math
from typing import List
from queue import PriorityQueue
from utils.help import Fraction

def P101():

    def U(n: int) -> int:

        ret = 0

        for i in range(0, 10 + 1):
            if i % 2 == 0:
                ret += n ** i
            else:
                ret -= n ** i
        return ret

    def print_matrix(M, size):
        print("\nMatrix")
        for i in range(size):
            s = []
            for j in range(0, size):
                s .append('{0:6s}'.format( str(M[i][j])))
            print("{} : {}".format(' '.join(s), M[i][-1]))

    def addMatrix(M, size, fromIdx, toIdx, multiply):
        for j in range(size+1):
            tmp = M[fromIdx][j] * multiply
            M[toIdx][j] = M[toIdx][j] + tmp

    def solve_equation(size: int):
        M = [[0 for _ in range(size+1)] for _ in range(size)]

        for i in range(size):

            PowN = Fraction((i + 1) ** (size - 1))

            for j in range(size):
                M[i][j] = PowN
                PowN = PowN / (i+1)

            M[i][size] = Fraction(U(i + 1))

        # print_matrix(M, size)

        for i in range(size):
            for j in range(size):
                if i == j:
                    continue
                if M[i][i] == 0:
                    continue

                T = M[j][i] / M[i][i]
                T = Fraction(-1) * T
                addMatrix(M, size, i, j, T)

            if M[i][i] != 0:
                t = M[i][i]
                for j in range(size+1):
                    M[i][j] = M[i][j] / t

        print_matrix(M, size)


        co = [Fraction(0) for _ in range(size)]

        for i in range(size):
            for j in range(size):
                if M[i][j] != 0:
                    co[i] = M[i][size]
                    break

        for i in range(1, 30):
            ret = Fraction(0)
            PowN = Fraction(i ** (size - 1))

            for j in range(size):
                ret += co[j] * PowN
                PowN /= i

            u = U(i)
            if u != ret:
                print("size={0:3d} / n={1:3d} / eq={2:14s} / U({3})={4:14s}".format(
                    size,
                    i,
                    str(ret),
                    i,
                    str(U(i)),
                ))
                return ret

        return Fraction(0)

    ret = Fraction(0)
    for i in range(1, 20):
        ret += solve_equation(i)

    print("ans :                 {}".format(ret))

def P103():
    class Solver():
        target_length: int
        best: int
        best_data: List[int]

        data_list: List[int]
        cum_sum_list: List[int]

        def __init__(self, target_length):
            self.target_length = target_length
            self.best = 10**10

            self.best_data = [0] * target_length
            self.data_list = [0] * target_length
            self.cum_sum_list = [0] * target_length

        def check(self, data_len):
            data_set = set(self.data_list) - {0}

            for size in range(2, (data_len//2) + 1):
                for left_numbers in itertools.combinations(data_set, size):
                    remain_numbers = data_set - set(left_numbers)
                    sum_left_numbers = sum(left_numbers)

                    for right_numbers in itertools.combinations(remain_numbers, size):
                        if sum_left_numbers == sum(right_numbers):
                            return False

            return True

        def solve(self, curr_index=0):

            if curr_index == self.target_length:
                if self.best > self.cum_sum_list[curr_index-1]:
                    self.best = self.cum_sum_list[curr_index-1]
                    self.best_data = self.data_list[::]
                return

            if curr_index > 0 and self.best <= self.cum_sum_list[curr_index-1]:
                return

            start_num = 1 + (0 if curr_index == 0 else self.data_list[curr_index-1])
            end_num = start_num + 20

            if curr_index >= 2:
                left = 1
                right = curr_index
                while left < right:
                    left_sum = self.cum_sum_list[left]
                    if right == curr_index:
                        right_sum = 0
                    else:
                        right_sum = self.cum_sum_list[curr_index-1] - self.cum_sum_list[right-1]

                    end_num = min(end_num, left_sum - right_sum)
                    left += 1
                    right -= 1

            for n in range(start_num, end_num):
                self.data_list[curr_index] = n
                self.cum_sum_list[curr_index] = n + (0 if curr_index == 0 else self.cum_sum_list[curr_index-1])

                if curr_index < 3 or self.check(curr_index+1):
                    self.solve(curr_index+1)

                self.data_list[curr_index] = 0
                self.cum_sum_list[curr_index] = 0

    solver = Solver(7)
    solver.solve(0)

    print("list : ", solver.best_data)
    print("S(A) : ", solver.best)
    return solver.best_data


def P104():

    f0, f1, f2 = 2, 1, 1
    k = 3

    def is_pandigit(n):
        check = [0] * 10
        while n > 0:
            check[n%10] += 1
            if check[n % 10] != 1: return False
            n //= 10

        for i in range(1, 10):
            if check[i] != 1: return False
        return True

    while True:
        if k % 100 == 0 :
            print(k, f2, f1, f0)

        if is_pandigit(f0):
            e = k * 0.20898764024997873 - 0.3494850021680094
            r = int(math.pow(10, e - int(e) + 8 ))
            if is_pandigit(r):
                return k

        f2 = f1
        f1 = f0
        f0 = (f1 + f2) % 1000000000
        k += 1


def P105():
    str_input = '''81,88,75,42,87,84,86,65
157,150,164,119,79,159,161,139,158
673,465,569,603,629,592,584,300,601,599,600
90,85,83,84,65,87,76,46
165,168,169,190,162,85,176,167,127
224,275,278,249,277,279,289,295,139
354,370,362,384,359,324,360,180,350,270
599,595,557,298,448,596,577,667,597,588,602
175,199,137,88,187,173,168,171,174
93,187,196,144,185,178,186,202,182
157,155,81,158,119,176,152,167,159
184,165,159,166,163,167,174,124,83
1211,1212,1287,605,1208,1189,1060,1216,1243,1200,908,1210
339,299,153,305,282,304,313,306,302,228
94,104,63,112,80,84,93,96
41,88,82,85,61,74,83,81
90,67,84,83,82,97,86,41
299,303,151,301,291,302,307,377,333,280
55,40,48,44,25,42,41
1038,1188,1255,1184,594,890,1173,1151,1186,1203,1187,1195
76,132,133,144,135,99,128,154
77,46,108,81,85,84,93,83
624,596,391,605,529,610,607,568,604,603,453
83,167,166,189,163,174,160,165,133
308,281,389,292,346,303,302,304,300,173
593,1151,1187,1184,890,1040,1173,1186,1195,1255,1188,1203
68,46,64,33,60,58,65
65,43,88,87,86,99,93,90
83,78,107,48,84,87,96,85
1188,1173,1256,1038,1187,1151,890,1186,1184,1203,594,1195
302,324,280,296,294,160,367,298,264,299
521,760,682,687,646,664,342,698,692,686,672
56,95,86,97,96,89,108,120
344,356,262,343,340,382,337,175,361,330
47,44,42,27,41,40,37
139,155,161,158,118,166,154,156,78
118,157,164,158,161,79,139,150,159
299,292,371,150,300,301,281,303,306,262
85,77,86,84,44,88,91,67
88,85,84,44,65,91,76,86
138,141,127,96,136,154,135,76
292,308,302,346,300,324,304,305,238,166
354,342,341,257,348,343,345,321,170,301
84,178,168,167,131,170,193,166,162
686,701,706,673,694,687,652,343,683,606,518
295,293,301,367,296,279,297,263,323,159
1038,1184,593,890,1188,1173,1187,1186,1195,1150,1203,1255
343,364,388,402,191,383,382,385,288,374
1187,1036,1183,591,1184,1175,888,1197,1182,1219,1115,1167
151,291,307,303,345,238,299,323,301,302
140,151,143,138,99,69,131,137
29,44,42,59,41,36,40
348,329,343,344,338,315,169,359,375,271
48,39,34,37,50,40,41
593,445,595,558,662,602,591,297,610,580,594
686,651,681,342,541,687,691,707,604,675,699
180,99,189,166,194,188,144,187,199
321,349,335,343,377,176,265,356,344,332
1151,1255,1195,1173,1184,1186,1188,1187,1203,593,1038,891
90,88,100,83,62,113,80,89
308,303,238,300,151,304,324,293,346,302
59,38,50,41,42,35,40
352,366,174,355,344,265,343,310,338,331
91,89,93,90,117,85,60,106
146,186,166,175,202,92,184,183,189
82,67,96,44,80,79,88,76
54,50,58,66,31,61,64
343,266,344,172,308,336,364,350,359,333
88,49,87,82,90,98,86,115
20,47,49,51,54,48,40
159,79,177,158,157,152,155,167,118
1219,1183,1182,1115,1035,1186,591,1197,1167,887,1184,1175
611,518,693,343,704,667,686,682,677,687,725
607,599,634,305,677,604,603,580,452,605,591
682,686,635,675,692,730,687,342,517,658,695
662,296,573,598,592,584,553,593,595,443,591
180,185,186,199,187,210,93,177,149
197,136,179,185,156,182,180,178,99
271,298,218,279,285,282,280,238,140
1187,1151,890,593,1194,1188,1184,1173,1038,1186,1255,1203
169,161,177,192,130,165,84,167,168
50,42,43,41,66,39,36
590,669,604,579,448,599,560,299,601,597,598
174,191,206,179,184,142,177,180,90
298,299,297,306,164,285,374,269,329,295
181,172,162,138,170,195,86,169,168
1184,1197,591,1182,1186,889,1167,1219,1183,1033,1115,1175
644,695,691,679,667,687,340,681,770,686,517
606,524,592,576,628,593,591,584,296,444,595
94,127,154,138,135,74,136,141
179,168,172,178,177,89,198,186,137
302,299,291,300,298,149,260,305,280,370
678,517,670,686,682,768,687,648,342,692,702
302,290,304,376,333,303,306,298,279,153
95,102,109,54,96,75,85,97
150,154,146,78,152,151,162,173,119
150,143,157,152,184,112,154,151,132
36,41,54,40,25,44,42
37,48,34,59,39,41,40
681,603,638,611,584,303,454,607,606,605,596'''

    def Sum(sum_list, s, length):
        e = s + length - 1

        if s == 0:
            return sum_list[e]
        else:
            return sum_list[e] - sum_list[s-1]

    def check1(data_list):

        S = data_list[::]
        for i in range(1, len(S)):
            S[i] += S[i-1]

        left = 1
        right = len(data_list)-1
        while left < right:
            if Sum(S, 0, left+1) <= Sum(S, right, left):
                return False
            left += 1
            right -= 1

        return True

    def check2(data_list):
        data_len = len(data_list)
        data_set = set(data_list)

        for size in range(2, (data_len // 2) + 1):
            for left_numbers in itertools.combinations(data_set, size):
                remain_numbers = data_set - set(left_numbers)
                sum_left_numbers = sum(left_numbers)

                for right_numbers in itertools.combinations(remain_numbers, size):
                    if sum_left_numbers == sum(right_numbers):
                        return False
        return True

    ret = 0
    for line in str_input.strip().split('\n'):
        data = sorted(list(map(int, line.split(','))))
        if not check1(data) or not check2(data):
            continue

        ret += sum(data)
        print(data, ret)

    return ret


def P106():
    def check(arr1, arr2):
        for a, b in zip(arr1, arr2):
            if a > b: return False
        return True

    def solve(n):
        setall = set(range(n))
        sol = 0

        for k in range(2, n // 2 + 1):
            for set1 in itertools.combinations(setall, k):
                for set2 in itertools.combinations(setall.difference(set1), k):
                    arr1, arr2 = sorted(set1), sorted(set2)
                    if arr1[0] < arr2[0]:
                        if not check(set1, set2):
                            sol += 1

        return sol

    for n in range(4, 13):
        print(n, ':', solve(n))


def P107():
    str_data = '''-,-,-,427,668,495,377,678,-,177,-,-,870,-,869,624,300,609,131,-,251,-,-,-,856,221,514,-,591,762,182,56,-,884,412,273,636,-,-,774
-,-,262,-,-,508,472,799,-,956,578,363,940,143,-,162,122,910,-,729,802,941,922,573,531,539,667,607,-,920,-,-,315,649,937,-,185,102,636,289
-,262,-,-,926,-,958,158,647,47,621,264,81,-,402,813,649,386,252,391,264,637,349,-,-,-,108,-,727,225,578,699,-,898,294,-,575,168,432,833
427,-,-,-,366,-,-,635,-,32,962,468,893,854,718,427,448,916,258,-,760,909,529,311,404,-,-,588,680,875,-,615,-,409,758,221,-,-,76,257
668,-,926,366,-,-,-,250,268,-,503,944,-,677,-,727,793,457,981,191,-,-,-,351,969,925,987,328,282,589,-,873,477,-,-,19,450,-,-,-
495,508,-,-,-,-,-,765,711,819,305,302,926,-,-,582,-,861,-,683,293,-,-,66,-,27,-,-,290,-,786,-,554,817,33,-,54,506,386,381
377,472,958,-,-,-,-,-,-,120,42,-,134,219,457,639,538,374,-,-,-,966,-,-,-,-,-,449,120,797,358,232,550,-,305,997,662,744,686,239
678,799,158,635,250,765,-,-,-,35,-,106,385,652,160,-,890,812,605,953,-,-,-,79,-,712,613,312,452,-,978,900,-,901,-,-,225,533,770,722
-,-,647,-,268,711,-,-,-,283,-,172,-,663,236,36,403,286,986,-,-,810,761,574,53,793,-,-,777,330,936,883,286,-,174,-,-,-,828,711
177,956,47,32,-,819,120,35,283,-,50,-,565,36,767,684,344,489,565,-,-,103,810,463,733,665,494,644,863,25,385,-,342,470,-,-,-,730,582,468
-,578,621,962,503,305,42,-,-,50,-,155,519,-,-,256,990,801,154,53,474,650,402,-,-,-,966,-,-,406,989,772,932,7,-,823,391,-,-,933
-,363,264,468,944,302,-,106,172,-,155,-,-,-,380,438,-,41,266,-,-,104,867,609,-,270,861,-,-,165,-,675,250,686,995,366,191,-,433,-
870,940,81,893,-,926,134,385,-,565,519,-,-,313,851,-,-,-,248,220,-,826,359,829,-,234,198,145,409,68,359,-,814,218,186,-,-,929,203,-
-,143,-,854,677,-,219,652,663,36,-,-,313,-,132,-,433,598,-,-,168,870,-,-,-,128,437,-,383,364,966,227,-,-,807,993,-,-,526,17
869,-,402,718,-,-,457,160,236,767,-,380,851,132,-,-,596,903,613,730,-,261,-,142,379,885,89,-,848,258,112,-,900,-,-,818,639,268,600,-
624,162,813,427,727,582,639,-,36,684,256,438,-,-,-,-,539,379,664,561,542,-,999,585,-,-,321,398,-,-,950,68,193,-,697,-,390,588,848,-
300,122,649,448,793,-,538,890,403,344,990,-,-,433,596,539,-,-,73,-,318,-,-,500,-,968,-,291,-,-,765,196,504,757,-,542,-,395,227,148
609,910,386,916,457,861,374,812,286,489,801,41,-,598,903,379,-,-,-,946,136,399,-,941,707,156,757,258,251,-,807,-,-,-,461,501,-,-,616,-
131,-,252,258,981,-,-,605,986,565,154,266,248,-,613,664,73,-,-,686,-,-,575,627,817,282,-,698,398,222,-,649,-,-,-,-,-,654,-,-
-,729,391,-,191,683,-,953,-,-,53,-,220,-,730,561,-,946,686,-,-,389,729,553,304,703,455,857,260,-,991,182,351,477,867,-,-,889,217,853
251,802,264,760,-,293,-,-,-,-,474,-,-,168,-,542,318,136,-,-,-,-,392,-,-,-,267,407,27,651,80,927,-,974,977,-,-,457,117,-
-,941,637,909,-,-,966,-,810,103,650,104,826,870,261,-,-,399,-,389,-,-,-,202,-,-,-,-,867,140,403,962,785,-,511,-,1,-,707,-
-,922,349,529,-,-,-,-,761,810,402,867,359,-,-,999,-,-,575,729,392,-,-,388,939,-,959,-,83,463,361,-,-,512,931,-,224,690,369,-
-,573,-,311,351,66,-,79,574,463,-,609,829,-,142,585,500,941,627,553,-,202,388,-,164,829,-,620,523,639,936,-,-,490,-,695,-,505,109,-
856,531,-,404,969,-,-,-,53,733,-,-,-,-,379,-,-,707,817,304,-,-,939,164,-,-,616,716,728,-,889,349,-,963,150,447,-,292,586,264
221,539,-,-,925,27,-,712,793,665,-,270,234,128,885,-,968,156,282,703,-,-,-,829,-,-,-,822,-,-,-,736,576,-,697,946,443,-,205,194
514,667,108,-,987,-,-,613,-,494,966,861,198,437,89,321,-,757,-,455,267,-,959,-,616,-,-,-,349,156,339,-,102,790,359,-,439,938,809,260
-,607,-,588,328,-,449,312,-,644,-,-,145,-,-,398,291,258,698,857,407,-,-,620,716,822,-,-,293,486,943,-,779,-,6,880,116,775,-,947
591,-,727,680,282,290,120,452,777,863,-,-,409,383,848,-,-,251,398,260,27,867,83,523,728,-,349,293,-,212,684,505,341,384,9,992,507,48,-,-
762,920,225,875,589,-,797,-,330,25,406,165,68,364,258,-,-,-,222,-,651,140,463,639,-,-,156,486,212,-,-,349,723,-,-,186,-,36,240,752
182,-,578,-,-,786,358,978,936,385,989,-,359,966,112,950,765,807,-,991,80,403,361,936,889,-,339,943,684,-,-,965,302,676,725,-,327,134,-,147
56,-,699,615,873,-,232,900,883,-,772,675,-,227,-,68,196,-,649,182,927,962,-,-,349,736,-,-,505,349,965,-,474,178,833,-,-,555,853,-
-,315,-,-,477,554,550,-,286,342,932,250,814,-,900,193,504,-,-,351,-,785,-,-,-,576,102,779,341,723,302,474,-,689,-,-,-,451,-,-
884,649,898,409,-,817,-,901,-,470,7,686,218,-,-,-,757,-,-,477,974,-,512,490,963,-,790,-,384,-,676,178,689,-,245,596,445,-,-,343
412,937,294,758,-,33,305,-,174,-,-,995,186,807,-,697,-,461,-,867,977,511,931,-,150,697,359,6,9,-,725,833,-,245,-,949,-,270,-,112
273,-,-,221,19,-,997,-,-,-,823,366,-,993,818,-,542,501,-,-,-,-,-,695,447,946,-,880,992,186,-,-,-,596,949,-,91,-,768,273
636,185,575,-,450,54,662,225,-,-,391,191,-,-,639,390,-,-,-,-,-,1,224,-,-,443,439,116,507,-,327,-,-,445,-,91,-,248,-,344
-,102,168,-,-,506,744,533,-,730,-,-,929,-,268,588,395,-,654,889,457,-,690,505,292,-,938,775,48,36,134,555,451,-,270,-,248,-,371,680
-,636,432,76,-,386,686,770,828,582,-,433,203,526,600,848,227,616,-,217,117,707,369,109,586,205,809,-,-,240,-,853,-,-,-,768,-,371,-,540
774,289,833,257,-,381,239,722,711,468,933,-,-,17,-,-,148,-,-,853,-,-,-,-,264,194,260,947,-,752,147,-,-,343,112,273,344,680,540,-'''

#     str_data = '''
# -, 16, 12, 21 ,-, -, -
# 16, -, -, 17, 20, -, -
# 12, -, -, 28 ,-, 31, -
# 21, 17, 28, -, 18, 19, 23
# -, 20, -, 18 ,-, -, 11
# -, -, 31, 19 ,-, -, 27
# -, -, -, 23, 11, 27, -
# '''
    INF = 10**10

    A = []
    S = 0
    for line in str_data.strip().split('\n'):
        row = [INF if a.strip() == '-' else int(a.strip()) for a in line.strip().split(',')]
        A.append(row)
        S += sum([a for a in row if a < INF])

    N = len(A)
    C = [False] * N
    Q = PriorityQueue()

    Q.put(item=(0, 0))

    ret = 0

    while not Q.empty():
        weight, node = Q.get()
        if C[node]: continue

        ret += weight
        C[node] = True

        for idx in range(N):
            if C[idx]: continue
            if A[node][idx] >= INF: continue
            Q.put((A[node][idx], idx))

    return S // 2 - ret


def P109():

    scores = [(0, 0)]
    for k in [1, 2, 3]:
        scores += [(k, i) for i in range(1, 20+1)]
    scores += [(1, 25), (2, 25)]

    ret = set([])

    for m1, n1 in scores:
        for m2, n2 in scores:
            for m3, n3 in scores:
                if m3 != 2: continue
                if m1*n1 + m2*n2 + m3*n3 >= 100: continue

                row = [m1, n1, m2, n2] if m1*1000+n1 < m2*1000+n2 else [m2, n2, m1, n1]
                row += [m3, n3]

                ret.add(tuple(row))

    return len(ret)